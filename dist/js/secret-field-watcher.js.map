{"version":3,"sources":["../../src/js/secret-field-watcher.js"],"names":["SecretFieldWatcher","parameters","_this","this","_classCallCheck","options","errorMessageSpan","lookForFieldValue","evt","console","log","name","value","currentValue","target","background","document","querySelector","style","backgroundColor","errorMessage","innerHTML","parametersWithDefaults","Object","assign","foregroundColor","field","addEventListener","parentElement","warn"],"mappings":"+JAAMA,mBAKJ,SAAAA,mBAAYC,YAAY,IAAAC,MAAAC,KAAAC,gBAAAD,KAAAH,oBAAAG,KAHxBE,WAGwBF,KAFxBG,iBAAmB,KAEKH,KAiCxBI,kBAAoB,SAACC,KACnBC,QAAQC,IAAI,YAAaR,MAAKG,QAAQM,KAAMT,MAAKG,QAAQO,OACzD,IAAMC,aAAeL,IAAIM,OAAOF,MAC5BG,WAAaC,SAASC,cAAc,eACpCJ,eAAiBX,MAAKG,QAAQO,OAChCH,QAAQC,IAAI,gBAEZK,WAAWG,MAAMC,gBAAkBjB,MAAKG,QAAQc,gBAE5CjB,MAAKG,QAAQe,eACflB,MAAKG,QAAQC,iBAAiBe,UAAYnB,MAAKG,QAAQe,gBAKzDX,QAAQC,IAAI,iBAAkBG,cAC9BE,WAAWG,MAAMC,gBAAkB,GACnCjB,MAAKG,QAAQC,iBAAiBe,UAAY,KAjD5C,IAAMC,uBAAyBC,OAAOC,WAGlCb,KAAM,IACNC,MAAO,IACPO,gBAAiB,OACjBM,gBAAiB,QACjBL,aAAc,KAEhBnB,YAGIU,KAAOW,uBAAuBX,KAMpC,GAJAR,KAAKE,QAAUiB,uBAEfb,QAAQC,IAAI,4BAA6BY,uBAAwBX,MAE7DA,KAAM,CAER,IAAMe,MAAQV,SAASC,cAAT,eAAsCN,KAAtC,MACVe,OACFA,MAAMC,iBAAiB,QAASxB,KAAKI,mBACrCJ,KAAKE,QAAQC,iBAAmBoB,MAAME,cAAcX,cAClD,mBAGFR,QAAQoB,KAAK,2BAA4BlB","sourcesContent":["class SecretFieldWatcher {\n\n  options = {};\n  errorMessageSpan = null;\n\n  constructor(parameters) {\n    const parametersWithDefaults = Object.assign(\n      {},\n      {\n        name: \" \",\n        value: \" \",\n        backgroundColor: \"blue\",\n        foregroundColor: \"white\",\n        errorMessage: \" \",\n      },\n      parameters\n    );\n\n    const name = parametersWithDefaults.name;\n   \n    this.options = parametersWithDefaults;\n\n    console.log(\"SecretFieldWatcher ready!\", parametersWithDefaults, name);\n\n    if (name) {\n    \n      const field = document.querySelector(`input[name=\"${name}\"]`);\n      if (field) {\n        field.addEventListener(\"keyup\", this.lookForFieldValue);\n        this.options.errorMessageSpan = field.parentElement.querySelector(\n          \".error-message\"\n        );\n      } else {\n        console.warn(\"Hmm Something went wrong\", name);\n      }\n    }\n  }\n\n  lookForFieldValue = (evt) => {\n    console.log(\"Searching\", this.options.name, this.options.value);\n    const currentValue = evt.target.value;\n    let background = document.querySelector(\".background\");\n    if (currentValue === this.options.value) {\n      console.log(\"It's a match\");\n\n      background.style.backgroundColor = this.options.backgroundColor;\n\n      if (this.options.errorMessage) {\n        this.options.errorMessageSpan.innerHTML = this.options.errorMessage;\n      }\n\n     \n    } else {\n      console.log(\"does not match\", currentValue);\n      background.style.backgroundColor = \"\";\n      this.options.errorMessageSpan.innerHTML = \"\";\n    }\n  };\n}\n"]}